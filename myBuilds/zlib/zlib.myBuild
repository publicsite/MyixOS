#!/bin/sh
actualname="zlib"
version="1.2.11"
filename="${actualname}-${version}"
extension=".tar.xz"
#get from this location on the zlib site, because that's easier for maintainance
source="http://zlib.net/${filename}${extension}"
sumUrl=""

#functions

do_get(){
#printf "wget %s\n" "$source"

	"${myBuildHelpersDir}"/myBuildGet.sh "${source}" "${myBuildSourceDest}"
	return "$?"
}

do_extract(){
	rm -rf "${myBuildExtractDest}/${filename}"
	"${myBuildHelpersDir}"/myBuildExtract.sh "${myBuildSourceDest}/${filename}${extension}" "${myBuildExtractDest}"
	return "$?"
}

do_build(){

#cd ${SYSROOT}/lib
#while true; do
#	printf "\n\n==TYPE THE LIB DIR==\n\n"
#
#	find . -name libc.so.* | cut -d "/" -f 2
#
#	read theLibDir
#
#	checkResultLibDir "$theLibDir"
#
#	if [ "$?" = "0" ]; then
#		break
#	fi
#done

#here you put commands like configure and make

cd "${myBuildExtractDest}/${filename}"

CC="${TARGET}-gcc -L${TEMP_SYSROOT}${PREFIX}/${TARGET}/lib --sysroot=${TEMP_SYSROOT}" CHOST="${TARGET}" ./configure --prefix=${PREFIX}/${TARGET} --libdir="${PREFIX}/${TARGET}/lib"

make DESTDIR=${SYSROOT}
return "$?"
}

do_install(){
#here you put the installation commands, like make install
cd "${myBuildExtractDest}/${filename}"
make install DESTDIR=${SYSROOT}
return "$?"
}

do_package(){
#here you package the files
mkdir -p "${CONTDIR}"
mkdir -p "${SYSROOT}"

#here you package the files
cp -a "${myBuildHome}"/myBuilds/${actualname}/${actualname}.control "${CONTDIR}/control"
printf "Architecture: %s\n" "$(printf "%s\n" "${TARGET}" | cut -d "-" -f 1-2)" >> "${CONTDIR}/control"

printf "2.0" > "${BUILDDIR}/debian-binary"

cd "${CONTDIR}"
tar --numeric-owner --group=0 --owner=0 -cf "${BUILDDIR}/control.tar" ./*

cd "${SYSROOT}"
tar --numeric-owner --group=0 --owner=0 -cf "${BUILDDIR}/data.tar" ./*

cd "${BUILDDIR}"
ar r "${PKGDIR}/${actualname}_${version}.$(printf "%s" "${TARGET}" | cut -d "-" -f 1-2).deb" ./debian-binary ./control.tar ./data.tar

rm -rf "${CONTDIR}"
rm -rf "${SYSROOT}"
mkdir -p "${CONTDIR}"
mkdir -p "${SYSROOT}"
rm -f "${BUILDDIR}/debian-binary"
rm -f "${BUILDDIR}/control.tar"
rm -f "${BUILDDIR}/data.tar"

return "$?"
}

if [ "$myBuildDoNotCallMainFunction" != "1" ]; then
#main code goes here
"${myBuildHelpersDir}"/argumentHelper.sh "$1" "$0"
fi