#!/bin/sh
actualname="flex"
minorversion="2.5.4a"
version="${minorversion}-1"
filename="${actualname}-${version}-src"
extension=".zip"
source="https://sourceforge.net/projects/gnuwin32/files/flex/${version}/${filename}${extension}/download"
sumUrl=""

#functions

do_get(){
	"${myBuildHelpersDir}"/myBuildGet.sh "${source}" "${myBuildSourceDest}"
	mv "${myBuildSourceDest}/download" "${myBuildSourceDest}/${filename}"
	return "$?"
}

do_extract(){
	mkdir "${myBuildExtractDest}/${filename}"
	"${myBuildHelpersDir}"/myBuildExtract.sh "${myBuildSourceDest}/${filename}${extension}" "${myBuildExtractDest}/${filename}"
	#mv "${myBuildExtractDest}/src" "${myBuildExtractDest}/${filename}"
	return "$?"
}

do_build(){
#here you put commands like configure and make

cd "${myBuildExtractDest}/${filename}/src/flex/${minorversion}/flex-${minorversion}"

#patch -p0 < "${myBuildHome}"/myBuilds/flex-w32/flex_dont_check_headers.patch
#sed -i "s#ac_compile='\$CC -c \$CFLAGS \$CPPFLAGS conftest.\$ac_ext >&5'#ac_compile='\$CC -c \$CFLAGS \$CPPFLAGS conftest.\$ac_ext -L${TEMP_SYSROOT}${PREFIX}/${TARGET}/lib -lgnu >\&5'#g" configure
#sed -i "s#ac_link='\$CC -o conftest\$ac_exeext \$CFLAGS \$CPPFLAGS \$LDFLAGS conftest.\$ac_ext \$LIBS >&5'#ac_link='\$CC -o conftest\$ac_exeext \$CFLAGS \$CPPFLAGS \$LDFLAGS conftest.\$ac_ext -L${TEMP_SYSROOT}${PREFIX}/${TARGET}/lib \$LIBS >\&5'#g" configure

CC="${TARGET}-gcc -I${TEMP_SYSROOT}${PREFIX}/${TARGET}/include" \
LD="${TARGET}-ld" RANLIB="${TARGET}-ranlib" AS="${TARGET}-as" \
./configure \
    --prefix="${PREFIX}/${TARGET}" \
    --build=${BUILD} \
    --host=${HOST} \
    --target=${TARGET}

make DESTDIR=${SYSROOT}
return "$?"
}

do_install(){
#here you put the installation commands, like make install
cd "${myBuildExtractDest}/${filename}/src/flex/${minorversion}/flex-${minorversion}"
cp -a flex.exe "${SYSROOT}${PREFIX}/${TARGET}/bin"
return "$?"
}

do_package(){
#here you package the files
cp -a "${myBuildHome}"/myBuilds/${actualname}-w32/${actualname}.control "${CONTDIR}/control"
printf "Architecture: %s\n" "$(printf "%s\n" "${TARGET}" | cut -d "-" -f 1-2)" >> "${CONTDIR}/control"

printf "2.0" > "${BUILDDIR}/debian-binary"

cd "${CONTDIR}"
tar --numeric-owner --group=0 --owner=0 -cf "${BUILDDIR}/control.tar" ./*

cd "${SYSROOT}"
tar --numeric-owner --group=0 --owner=0 -cf "${BUILDDIR}/data.tar" ./*

cd "${BUILDDIR}"
ar r "${PKGDIR}/${actualname}_${version}.$(printf "%s" "${TARGET}" | cut -d "-" -f 1-2).deb" ./debian-binary ./control.tar ./data.tar

rm -rf "${CONTDIR}"
rm -rf "${SYSROOT}"
mkdir -p "${CONTDIR}"
mkdir -p "${SYSROOT}"
rm -f "${BUILDDIR}/debian-binary"
rm -f "${BUILDDIR}/control.tar"
rm -f "${BUILDDIR}/data.tar"

cd "${myBuildHome}"
return "$?"
}

if [ "$myBuildDoNotCallMainFunction" != "1" ]; then
#main code goes here
"${myBuildHelpersDir}"/argumentHelper.sh "$1" "$0"
fi