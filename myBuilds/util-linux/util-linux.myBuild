#!/bin/sh
actualname="util-linux"
version="2.34"
filename="${actualname}-${version}"
extension=".tar.xz"
source="https://mirrors.edge.kernel.org/pub/linux/utils/util-linux/v${version}/${filename}${extension}"
sumUrl=""

#functions

do_get(){
	"${myBuildHelpersDir}"/myBuildGet.sh "${source}" "${myBuildSourceDest}"
	return "$?"
}

do_extract(){
	"${myBuildHelpersDir}"/myBuildExtract.sh "${myBuildSourceDest}/${filename}${extension}" "${myBuildExtractDest}"
	return "$?"
}

do_build(){
#here you put commands like configure and make

cd "${myBuildExtractDest}/${filename}"

sed -i "s%as_fn_error \$? \"pkg-config description of libselinux, needed for static build, is not available\" \"\$LINENO\" 5%SELINUX_LIBS_STATIC=\"-L${TEMP_SYSROOT}${PREFIX}/${TARGET}/lib -lselinux -lsepol -lpcre2-8\"%g" configure

if [ "${with_selinux}" = "true" ]; then
	if [ "$4" = "libuuid" ]; then
		SELINUX_CFLAGS="-I${TEMP_SYSROOT}${PREFIX}/${TARGET}/include" SELINUX_LIBS="-L${TEMP_SYSROOT}${PREFIX}/${TARGET}/lib -lselinux -lsepol -lpcre2-8" \
		CC="${TARGET}-gcc --sysroot=${TEMP_SYSROOT}" CXX="${TARGET}-g++ --sysroot=${TEMP_SYSROOT}" \
		./configure \
		    --prefix="${PREFIX}/${TARGET}" \
		    --build=${BUILD} \
		    --host=${HOST} \
		    --target=${TARGET} \
		    --with-selinux \
		    --disable-all-programs \
		    --enable-libuuid
	else
		SELINUX_CFLAGS="-I${TEMP_SYSROOT}${PREFIX}/${TARGET}/include" SELINUX_LIBS="-L${TEMP_SYSROOT}${PREFIX}/${TARGET}/lib -lselinux -lsepol -lpcre2-8" \
		CC="${TARGET}-gcc --sysroot=${TEMP_SYSROOT}" CXX="${TARGET}-g++ --sysroot=${TEMP_SYSROOT}" \
		./configure \
		    --prefix="${PREFIX}/${TARGET}" \
		    --build=${BUILD} \
		    --host=${HOST} \
		    --target=${TARGET} \
		    --with-selinux
	fi
else
	if [ "$4" = "libuuid" ]; then
		CC="${TARGET}-gcc --sysroot=${TEMP_SYSROOT}" CXX="${TARGET}-g++ --sysroot=${TEMP_SYSROOT}" \
		./configure \
		    --prefix="${PREFIX}/${TARGET}" \
		    --build=${BUILD} \
		    --host=${HOST} \
		    --target=${TARGET}
		    --disable-all-programs \
		    --enable-libuuid
	else
		CC="${TARGET}-gcc --sysroot=${TEMP_SYSROOT}" CXX="${TARGET}-g++ --sysroot=${TEMP_SYSROOT}" \
		./configure \
		    --prefix="${PREFIX}/${TARGET}" \
		    --build=${BUILD} \
		    --host=${HOST} \
		    --target=${TARGET}
	fi
fi

	make DESTDIR=${SYSROOT} all CC="${TARGET}-gcc --sysroot=${TEMP_SYSROOT}" CXX="${TARGET}-g++ --sysroot=${TEMP_SYSROOT}"
return "$?"
}

do_install(){
#here you put the installation commands, like make install
cd "${myBuildExtractDest}/${filename}"
		make install DESTDIR=${SYSROOT}
return "$?"
}

do_package(){
#here you package the files
cp -a "${myBuildHome}"/myBuilds/${actualname}/${actualname}.control "${CONTDIR}/control"
printf "Architecture: %s\n" "$(printf "%s\n" "${TARGET}" | cut -d "-" -f 1-2)" >> "${CONTDIR}/control"

printf "2.0" > "${BUILDDIR}/debian-binary"

cd "${CONTDIR}"
tar --numeric-owner --group=0 --owner=0 -cf "${BUILDDIR}/control.tar" ./*

cd "${SYSROOT}"
tar --numeric-owner --group=0 --owner=0 -cf "${BUILDDIR}/data.tar" ./*

cd "${BUILDDIR}"
ar r "${PKGDIR}/${actualname}_${version}.$(printf "%s" "${TARGET}" | cut -d "-" -f 1-2).deb" ./debian-binary ./control.tar ./data.tar

rm -rf "${CONTDIR}"
rm -rf "${SYSROOT}"
mkdir -p "${CONTDIR}"
mkdir -p "${SYSROOT}"
rm -f "${BUILDDIR}/debian-binary"
rm -f "${BUILDDIR}/control.tar"
rm -f "${BUILDDIR}/data.tar"

cd "${myBuildHome}"
return "$?"
}

if [ "$myBuildDoNotCallMainFunction" != "1" ]; then
#main code goes here
"${myBuildHelpersDir}"/argumentHelper.sh "$1" "$0" $@
fi