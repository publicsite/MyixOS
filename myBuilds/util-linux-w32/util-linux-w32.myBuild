#!/bin/sh
version="2.14.1"
filename="util-linux-ng-${version}-src"
extension=".zip"
source="https://sourceforge.net/projects/gnuwin32/files/util-linux/${version}/${filename}${extension}/download"
sumUrl=""

#functions

do_get(){
	"${myBuildHelpersDir}"/myBuildGet.sh "${source}" "${myBuildSourceDest}"
	mv "${myBuildSourceDest}/download" "${myBuildSourceDest}/${filename}"
	return "$?"
}

do_extract(){
	mkdir "${myBuildExtractDest}/${filename}"
	"${myBuildHelpersDir}"/myBuildExtract.sh "${myBuildSourceDest}/${filename}${extension}" "${myBuildExtractDest}/${filename}"
	return "$?"
}

do_build(){
#here you put commands like configure and make

cd "${myBuildExtractDest}/${filename}/src/util-linux-ng/${version}/${filename}"
chmod +x configure

	./configure \
	    --prefix="${PREFIX}/${TARGET}" \
	    --build=${BUILD} \
	    --host=${HOST} \
	    --target=${TARGET}

	make DESTDIR=${SYSROOT} all CC="${TARGET}-gcc --sysroot=${TEMP_SYSROOT} -I${TEMP_SYSROOT}${PREFIX}/${TARGET}/include"
return "$?"
}

do_install(){
#here you put the installation commands, like make install
cd "${myBuildExtractDest}/${filename}"
		make install DESTDIR=${SYSROOT}
return "$?"
}

do_package(){
#here you package the files
echo "package!"
return "$?"
}

if [ "$myBuildDoNotCallMainFunction" != "1" ]; then
#main code goes here
"${myBuildHelpersDir}"/argumentHelper.sh "$1" "$0" $@
fi