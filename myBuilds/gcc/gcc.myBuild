#!/bin/sh
#gcc 7.3.0 doesn't compile ncurses.so.5
#gcc 7.3.0 doesn't compile with ncurses 6.1 with or without a ncurses.so.5 symlink
filename="gcc-8.2.0"
extension=".tar.gz"
source="ftp://ftp.gnu.org/gnu/gcc/${filename}/${filename}${extension}"
sumUrl=""

#functions

do_get(){
	"${myBuildHelpersDir}"/myBuildGet.sh "${source}" "${myBuildSourceDest}"
	return "$?"
}

do_extract(){
	"${myBuildHelpersDir}"/myBuildExtract.sh "${myBuildSourceDest}/${filename}${extension}" "${myBuildExtractDest}"
	return "$?"
}

do_build(){
#here you put commands like configure and make

#"$myBuildHome/extras/playGeorge.sh" "$myBuildHome" &

while true; do
printf "Do you want to fetch packages from the internet? [y/n]"
	read internet
	if [ "${internet}" = "y" ]; then
		break
	elif [ "${internet}" = "n" ]; then
		break
	fi
done

if [ "${internet}" = "y" ]; then
	cd "${myBuildExtractDest}/${filename}"

	rm -rf "${myBuildSourceDest}"/gcc-prerequisites/*.tar*

	contrib/download_prerequisites
else

	cd "${myBuildSourceDest}"/gcc-prerequisites

	mpc=mpc-*.tar*
	mpfr=mpfr-*.tar*
	gmp=gmp-*.tar*
	isl=isl-*.tar*

	tar -xf "${myBuildSourceDest}"/gcc-prerequisites/${mpc} -C "${myBuildExtractDest}/${filename}"
	tar -xf "${myBuildSourceDest}"/gcc-prerequisites/${mpfr} -C "${myBuildExtractDest}/${filename}"
	tar -xf "${myBuildSourceDest}"/gcc-prerequisites/${gmp} -C "${myBuildExtractDest}/${filename}"
	tar -xf "${myBuildSourceDest}"/gcc-prerequisites/${isl} -C "${myBuildExtractDest}/${filename}"

	mpcExpanded=$(ls ${mpc})
	mpfrExpanded=$(ls ${mpfr})
	gmpExpanded=$(ls ${gmp})
	islExpanded=$(ls ${isl})

#printf "${myBuildExtractDest}/${filename}/mpc\n"
#printf "${myBuildExtractDest}/${filename}/${mpcExpanded%.tar*}"

	ln -s "${myBuildExtractDest}/${filename}/${mpcExpanded%.tar*}" "${myBuildExtractDest}/${filename}/mpc"
	ln -s "${myBuildExtractDest}/${filename}/${mpfrExpanded%.tar*}" "${myBuildExtractDest}/${filename}/mpfr"
	ln -s "${myBuildExtractDest}/${filename}/${gmpExpanded%.tar*}" "${myBuildExtractDest}/${filename}/gmp"
	ln -s "${myBuildExtractDest}/${filename}/${islExpanded%.tar*}" "${myBuildExtractDest}/${filename}/isl"

fi

#we make this dir so that gcc doesn't error when looking for crti.o
#https://stackoverflow.com/questions/91576/crti-o-file-missing
mkdir "${SYSROOT}/usr/lib"

mkdir "${SYSROOT}/dev"



#this fixes
#/dev/null:1:5: error: expected '=', ',', ';', 'asm' or '__attribute__' before ':' token
#make[3]: *** [Makefile:1976: s-selftest-c] Error 1
cd "${myBuildExtractDest}/${filename}/gcc"
patch -p1 < ../../../myBuilds/gcc/gcc-fself-test-fix-nfanku.patch

#if [ "$(ls -l /dev/null | cut -c 1-1)" != "c" ]; then
#	#if /dev/null is not a character special file, delete it
#	rm /dev/null
#	touch /dev/null
#fi

cd "${myBuildExtractDest}/${filename}"

if [ "${internet}" = "y" ]; then
	mkdir "${myBuildSourceDest}/gcc-prerequisites"
	mv mpc-*.tar.gz "${myBuildSourceDest}/gcc-prerequisites"
	mv mpfr-*.tar.bz2 "${myBuildSourceDest}/gcc-prerequisites"
	mv gmp-*.tar.bz2 "${myBuildSourceDest}/gcc-prerequisites"
	mv isl-*.tar.bz2 "${myBuildSourceDest}/gcc-prerequisites"
fi

if [ "${BITS}" = "64" ]; then

./configure \
	--prefix=$PREFIX \
	--build=$BUILD \
	--target=$TARGET \
	--enable-languages=c,c++ \
	--enable-cxx \
	--enable-threads \
	--enable-linker-build-id \
	--enable-multilib \
	--with-sysroot=${SYSROOT} \
	--with-build-sysroot=${SYSROOT} \
	--libexecdir=/usr/lib

else

./configure \
	--prefix=$PREFIX \
	--build=$BUILD \
	--target=$TARGET \
	--enable-languages=c,c++ \
	--enable-cxx \
	--enable-threads \
	--enable-linker-build-id \
	--enable-multilib
fi

#	--enable-bootstrap
#gcc always looks for the host's libc, even when sysroot options are said specified
#	--with-sysroot=${SYSROOT} \
#	--with-build-sysroot=${SYSROOT} \

#	--with-slibdir=/lib/${TARGET}
#	--libexecdir=/usr/lib

#	--with-boot-ldflags="-rpath ${SYSROOT}/lib/${TARGET}"
#	--with-boot-libs=${SYSROOT}/lib/${TARGET} \
#	--with-arch=$(printf "%s" "$TARGET" | cut -d '-' -f1) \
#	--with-build-sysroot=${SYSROOT} \
#	--with-lib-path="/lib:/usr/lib:/usr/lib/${TARGET}:/lib64:/usr/lib64" \
#	--with-lib-path="/lib:/usr/lib:/usr/lib/${TARGET}" \

#


#	--enable-multilib
#        --with-native-system-header-dir=${SYSROOT}
#	--enable-multilib #got rid of 

make $J all

#if [ "${internet}" = "y" ]; then        WOZ ERE.

return "$?"
}

do_install(){
#here you put the installation commands, like make install
#echo "install!"
cd "${myBuildExtractDest}/${filename}"
make $J install DESTDIR=${SYSROOT}
return "$?"
}

do_package(){
#here you package the files
echo "package!"
return "$?"
}

if [ "$myBuildDoNotCallMainFunction" != "1" ]; then
#main code goes here
"${myBuildHelpersDir}"/argumentHelper.sh "$1" "$0"
fi