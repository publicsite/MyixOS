#!/bin/sh
actualname="pcre"
version="8.43"
filename="${actualname}-${version}"
extension=".tar.gz"
source="ftp://ftp.pcre.org/pub/pcre/${filename}${extension}"
sumUrl=""

#functions

do_get(){
	"${myBuildHelpersDir}"/myBuildGet.sh "${source}" "${myBuildSourceDest}"
	return "$?"
}

do_extract(){
	"${myBuildHelpersDir}"/myBuildExtract.sh "${myBuildSourceDest}/${filename}${extension}" "${myBuildExtractDest}"
	return "$?"
}

do_build(){
#here you put commands like configure and make
#cassertinc="$(find ${TEMP_SYSROOT}${PREFIX}/${TARGET}/include/c++/ -maxdepth 1 -mindepth 1 | head -n 1)"
#bitsinc="${cassertinc}/${TARGET}"

cd "${myBuildExtractDest}/${filename}"

CC="${TARGET}-gcc --sysroot=${TEMP_SYSROOT} -isystem=${TEMP_SYSROOT}${PREFIX}/${TARGET}/include" CXX="${TARGET}-g++ -isystem=${TEMP_SYSROOT} -I${TEMP_SYSROOT}${PREFIX}/${TARGET}/include" \
./configure \
    --prefix="${PREFIX}/${TARGET}" \
    --build=${BUILD} \
    --host=${HOST} \
    --target=${TARGET} \
    --enable-unicode-properties \
    --enable-pcre16 \
    --enable-pcre32

make DESTDIR=${SYSROOT}
return "$?"
}

do_install(){
#here you put the installation commands, like make install
cd "${myBuildExtractDest}/${filename}"
make install DESTDIR=${SYSROOT}

cd "${SYSROOT}${PREFIX}/${TARGET}/lib"

return "$?"
}

do_package(){
#here you package the files
cp -a "${myBuildHome}"/myBuilds/${actualname}/${actualname}.control "${CONTDIR}/control"
printf "Architecture: %s\n" "$(printf "%s\n" "${TARGET}" | cut -d "-" -f 1-2)" >> "${CONTDIR}/control"

printf "2.0" > "${BUILDDIR}/debian-binary"

cd "${CONTDIR}"
tar --numeric-owner --group=0 --owner=0 -cf "${BUILDDIR}/control.tar" ./*

cd "${SYSROOT}"
tar --numeric-owner --group=0 --owner=0 -cf "${BUILDDIR}/data.tar" ./*

cd "${BUILDDIR}"
ar r "${PKGDIR}/${actualname}_${version}.$(printf "%s" "${TARGET}" | cut -d "-" -f 1-2).deb" ./debian-binary ./control.tar ./data.tar

rm -rf "${CONTDIR}"
rm -rf "${SYSROOT}"
mkdir -p "${CONTDIR}"
mkdir -p "${SYSROOT}"
rm -f "${BUILDDIR}/debian-binary"
rm -f "${BUILDDIR}/control.tar"
rm -f "${BUILDDIR}/data.tar"

cd "${myBuildHome}"
return "$?"
}

if [ "$myBuildDoNotCallMainFunction" != "1" ]; then
#main code goes here
"${myBuildHelpersDir}"/argumentHelper.sh "$1" "$0"
fi