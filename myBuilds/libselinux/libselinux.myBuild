#!/bin/sh
actualname="libselinux"
version="3.5"
filename="${actualname}-${version}"
extension=".tar.gz"
source="https://github.com/SELinuxProject/selinux/releases/download/${version}/${filename}${extension}"
sumUrl=""

#functions

do_get(){
	"${myBuildHelpersDir}"/myBuildGet.sh "${source}" "${myBuildSourceDest}"
	return "$?"
}

do_extract(){
	"${myBuildHelpersDir}"/myBuildExtract.sh "${myBuildSourceDest}/${filename}${extension}" "${myBuildExtractDest}"
	return "$?"
}

do_build(){
#here you put commands like configure and make

cd "${myBuildExtractDest}/${filename}"

sed -i 's#ln -sf --relative $(DESTDIR)$(SHLIBDIR)/$(LIBSO) $(DESTDIR)$(LIBDIR)/$(TARGET)#ln -sf $(SHLIBDIR)/$(LIBSO) $(DESTDIR)$(LIBDIR)/$(TARGET)#g' src/Makefile
sed -i 's#ln -sf --relative $(DESTDIR)$(PYTHONLIBDIR)/selinux/_selinux$(PYCEXT) $(DESTDIR)$(PYTHONLIBDIR)/_selinux$(PYCEXT)#ln -sf $(PYTHONLIBDIR)/selinux/_selinux$(PYCEXT) $(DESTDIR)$(PYTHONLIBDIR)/_selinux$(PYCEXT)#g' src/Makefile

##patch -p0 < "${myBuildHome}"/myBuilds/libselinux/libselinux_symlinks-are-relative-by-default-fix-for-busybox.patch

sed -i "s#PCRE_CFLAGS += \$(shell \$(PKG_CONFIG) --cflags \$(PCRE_MODULE))#PCRE_CFLAGS += -I${TEMP_SYSROOT}${PREFIX}/${TARGET}/include#g" "${myBuildExtractDest}/${filename}/Makefile"
sed -i "s#PCRE_LDLIBS := \$(shell \$(PKG_CONFIG) --libs \$(PCRE_MODULE))#PCRE_LDLIBS := -L${TEMP_SYSROOT}${PREFIX}/${TARGET}/lib -lpcre2-8#g" "${myBuildExtractDest}/${filename}/Makefile"

sed -i "s#ARCH := \$(patsubst i%86,i386,\$(shell uname -m))#ARCH := \$(patsubst i%86,i386,$(printf ${TARGET} | cut -f 1 -d -))#g" "${myBuildExtractDest}/${filename}/src/Makefile"


sed -i "s#USE_PCRE2 ?= n#USE_PCRE2 = y#g" "${myBuildExtractDest}/${filename}/Makefile"

make DESTDIR=${SYSROOT} CC="${TARGET}-gcc --sysroot=${TEMP_SYSROOT}" CXX="${TARGET}-g++ --sysroot=${TEMP_SYSROOT}" AR=${TARGET}-ar RANLIB=${TARGET}-ranlib PREFIX="${PREFIX}/${TARGET}"

return "$?"
}

do_install(){
#here you put the installation commands, like make install
cd "${myBuildExtractDest}/${filename}"
make DESTDIR=${SYSROOT} CC=${TARGET}-gcc CXX=${TARGET}-g++ AR=${TARGET}-ar RANLIB=${TARGET}-ranlib  PREFIX="${PREFIX}/${TARGET}" install

cd ${SYSROOT}/lib
rm libselinux.so
$MYIXOS_LINK libselinux.so.1 libselinux.so
return "$?"
}

do_package(){
#here you package the files
cp -a "${myBuildHome}"/myBuilds/${actualname}/${actualname}.control "${CONTDIR}/control"
printf "Architecture: %s\n" "$(printf "%s\n" "${TARGET}" | cut -d "-" -f 1-2)" >> "${CONTDIR}/control"

printf "2.0" > "${BUILDDIR}/debian-binary"

cd "${CONTDIR}"
tar --numeric-owner --group=0 --owner=0 -cf "${BUILDDIR}/control.tar" ./*

cd "${SYSROOT}"
tar --numeric-owner --group=0 --owner=0 -cf "${BUILDDIR}/data.tar" ./*

cd "${BUILDDIR}"
ar r "${PKGDIR}/${actualname}_${version}.$(printf "%s" "${TARGET}" | cut -d "-" -f 1-2).deb" ./debian-binary ./control.tar ./data.tar

rm -rf "${CONTDIR}"
rm -rf "${SYSROOT}"
mkdir -p "${CONTDIR}"
mkdir -p "${SYSROOT}"
rm -f "${BUILDDIR}/debian-binary"
rm -f "${BUILDDIR}/control.tar"
rm -f "${BUILDDIR}/data.tar"

cd "${myBuildHome}"
return "$?"
}

if [ "$myBuildDoNotCallMainFunction" != "1" ]; then
#main code goes here
"${myBuildHelpersDir}"/argumentHelper.sh "$1" "$0"
fi