#!/bin/sh
actualname="zlib"
version="1.2.11"
filename="${actualname}-${version}"
extension=".tar.xz"
#get from this location on the zlib site, because that's easier for maintinance
source="http://zlib.net/${filename}${extension}"
sumUrl=""

#functions

checkResultLibDir(){
#this function checks if the file exists given the user input as argument 1

	if [ "$(find . -name libc.so.* | cut -d "/" -f 2 | while read line; do if [ "$1" = "$line" ]; then printf "yes\n"; fi; done)" = "yes" ]; then
		return 0
	else
		return 101
	fi
}

do_get(){
	"${myBuildHelpersDir}"/myBuildGet.sh "${source}" "${myBuildSourceDest}"
	return "$?"
}

do_extract(){
	rm -rf "${myBuildExtractDest}/${filename}"
	"${myBuildHelpersDir}"/myBuildExtract.sh "${myBuildSourceDest}/${filename}${extension}" "${myBuildExtractDest}"
	return "$?"
}

do_build(){

theLibDir="$TARGET"

#	if [ "$(printf "%s\n" "${TARGET}" | cut -d "-" -f 2 )" != "pc" ]; then
#
#		cd ${SYSROOT}/lib
#
#		while true; do
#			printf "\n\n==TYPE THE LIB DIR==\n\n"
#
#			find . -name libc.so.* | cut -d "/" -f 2
#
#			read theLibDir
#
#			checkResultLibDir "$theLibDir"
#
#			if [ "$?" = "0" ]; then
#				break
#			fi
#		done
#	fi

#here you put commands like configure and make

#cd "${myBuildExtractDest}/${filename}"

#	CHOST="${TARGET}" AR="${TARGET}-ar" ./configure --prefix="${PREFIX}/${TARGET}" --libdir="${PREFIX}/${TARGET}/lib"

cd "${myBuildExtractDest}/${filename}"

sed -i "s#RCFLAGS = --define GCC_WINDRES#RCFLAGS = -I${TEMP_SYSROOT}${PREFIX}/${TARGET}/include --define GCC_WINDRES#g" win32/Makefile.gcc

make -fwin32/Makefile.gcc \
LOC="-I${TEMP_SYSROOT}${PREFIX}/${TARGET}/include -B${TEMP_SYSROOT}${PREFIX}/${TARGET}/lib -L${TEMP_SYSROOT}${PREFIX}/${TARGET}/lib/gcc/${TARGET}/lib/" \
DESTDIR=${SYSROOT} PREFIX="${TARGET}-"
#make test testdll -fwin32/Makefile.gcc DESTDIR=${SYSROOT} SHARED_MODE=1 PREFIX="${TARGET}-"
#CC="${TARGET}-gcc" LD="${TARGET}-ld" AR="${TARGET}-ar" AS="${TARGET}-as" 

return "$?"
}

do_install(){
#here you put the installation commands, like make install
cd "${myBuildExtractDest}/${filename}"

make -fwin32/Makefile.gcc install DESTDIR=${SYSROOT} INCLUDE_PATH="${PREFIX}/${TARGET}/include" LIBRARY_PATH="${PREFIX}/${TARGET}/lib" 

return "$?"
}

do_package(){
#here you package the files
mkdir -p "${CONTDIR}"
mkdir -p "${SYSROOT}"

#here you package the files
cp -a "${myBuildHome}"/myBuilds/${actualname}/${actualname}.control "${CONTDIR}/control"
printf "Architecture: %s\n" "$(printf "%s\n" "${TARGET}" | cut -d "-" -f 1-2)" >> "${CONTDIR}/control"

printf "2.0" > "${BUILDDIR}/debian-binary"

cd "${CONTDIR}"
tar --numeric-owner --group=0 --owner=0 -cf "${BUILDDIR}/control.tar" ./*

cd "${SYSROOT}"
tar --numeric-owner --group=0 --owner=0 -cf "${BUILDDIR}/data.tar" ./*

cd "${BUILDDIR}"
ar r "${PKGDIR}/${actualname}_${version}.$(printf "%s" "${TARGET}" | cut -d "-" -f 1-2).deb" ./debian-binary ./control.tar ./data.tar

rm -rf "${CONTDIR}"
rm -rf "${SYSROOT}"
mkdir -p "${CONTDIR}"
mkdir -p "${SYSROOT}"
rm -f "${BUILDDIR}/debian-binary"
rm -f "${BUILDDIR}/control.tar"
rm -f "${BUILDDIR}/data.tar"

return "$?"
}

if [ "$myBuildDoNotCallMainFunction" != "1" ]; then
#main code goes here
"${myBuildHelpersDir}"/argumentHelper.sh "$1" "$0"
fi