#!/bin/sh
actualname="linux"
version="6.1.1"
version1="6.1.1"
filename="${actualname}-${version}"
filename1="deblob-${version1}"
#filename2="deblob-check"
#filename3="deblob-main"
extension=".tar.gz"
#kernel sources at at cdn.kernel.org

source="https://mirrors.edge.kernel.org/pub/linux/kernel/v6.x/${filename}${extension}"
source1="https://www.fsfla.org/svn/fsfla/software/linux-libre/scripts/${filename1}"
#source2="https://www.fsfla.org/svn/fsfla/software/linux-libre/scripts/${filename2}"
#source3="https://www.fsfla.org/svn/fsfla/software/linux-libre/scripts/${filename3}"
sumUrl=""

#functions

checkandreplaceoption () {
#arg1 the path of the kernel defconfig
#arg2 the option to enable
	if [ "$(grep "# ${2} is not set" ${1})" != "" ]; then
		sed -i "s%# ${2} is not set%${2}=y%g" "${1}"
	else
		echo "${2}=y" >> "${1}"
	fi
}

filetest () {
  if [ ! -f $1 ]; then
    die $1 does not exist, something is wrong && return 1
  fi
}

clean_kconfig () {
  #$1 = filename $2 = things to remove
  case $1 in
  -f)
    shift
    ;;
  *)
    if $have_check; then
      filetest $1 || return 0
      if sed -n "/^\(menu\)\?config $2$/p" $1 | grep . > /dev/null; then
	:
      else
	die $1 does not contain matches for $2
      fi      
      return 0
    fi
    ;;
  esac
  filetest $1 || return 0
  sed "/^config \\($2\\)\$/{p;i\
	depends on NONFREE
d;}" $1 > $1.deblob
  check_changed $1 && echo $1: marked config $2 as depending on NONFREE
}

do_get(){
	rm -rf "${myBuildSourceDest}/linux"
	mkdir "${myBuildSourceDest}/linux"
	if [ "$?" != "0" ]; then return 1; fi #check for errors
	"${myBuildHelpersDir}"/myBuildGet.sh "${source}" "${myBuildSourceDest}/linux"
	#if [ "$?" != "0" ]; then return 1; fi #check for errors
	#"${myBuildHelpersDir}"/myBuildGet.sh "${source1}" "${myBuildSourceDest}/linux"
	#if [ "$?" != "0" ]; then return 1; fi #check for errors
	#"${myBuildHelpersDir}"/myBuildGet.sh "${source2}" "${myBuildSourceDest}/linux"
	#if [ "$?" != "0" ]; then return 1; fi #check for errors
	#"${myBuildHelpersDir}"/myBuildGet.sh "${source3}" "${myBuildSourceDest}/linux"
	#return "$?"
}

do_extract(){
	rm -rf "${myBuildExtractDest}/linux"
	mkdir "${myBuildExtractDest}/linux"
	"${myBuildHelpersDir}"/myBuildExtract.sh "${myBuildSourceDest}/linux/${filename}${extension}" "${myBuildExtractDest}/linux"
	#copy the script
	cp "${myBuildSourceDest}/linux/deblob-"* "${myBuildExtractDest}/linux/"
	cd "${myBuildExtractDest}/linux/${filename}"
	patch -p1 < "${myBuildHome}/myBuilds/linux/dont_fail_on_missing_symbol_table.patch"
	patch -p0 < "${myBuildHome}/myBuilds/linux/mount.h.patch"
	cd "${myBuildHome}"
	return "$?"
}

checkResultFile(){
#this function checks if the file exists given the user input as argument 1

	if [ "$(find . -maxdepth 1 -type f | cut -c 3- | while read line; do if [ "$1" = "$line" ]; then printf "yes\n"; fi; done)" = "yes" ]; then
		return 0
	else
		return 101
	fi
}

checkResultFolder(){
#this function checks if the folder exists given the user input as argument 1

	if [ "$(find . -maxdepth 1 -type d | cut -c 3- | while read line; do if [ "$1" = "$line" ]; then printf "yes\n"; fi; done)" = "yes" ]; then
		return 0
	else
		return 101
	fi
}

checkResultImage(){
#this function checks if the zImage or bzImage exists given the user input as argument 1

	if [ "$(find arch -name "zImage" | cut -d "/" -f2 | while read line; do if [ "$1" = "$line" ]; then printf "yes\n"; fi; done)" = "yes" ]; then
		return 0
	elif [ "$(find arch -name "bzImage" | cut -d "/" -f2 | while read line; do if [ "$1" = "$line" ]; then printf "yes\n"; fi; done)" = "yes" ]; then
		return 0
	else
		return 101
	fi
}

do_build(){
#here you put commands like configure and make


##This stuff is to deblob, but not disable, not so-much needed anymore

#cd "${myBuildExtractDest}/linux/${filename}"
#daswitch=0
#cat ../deblob-"${version1}" | while read line; do

#lineCheck="$(printf "%s\n" "$line" | grep "^drop_fw_file.*$" | cut -c 14-)"
#if [ "$lineCheck" != "" ]; then
#	if [ "$lineCheck" != "() {" ]; then
##echo "$lineCheck"
#		toDelete="$(printf "%s\n" "$lineCheck" | grep -o "^.* ")"
#	#	echo $toDelete
#		rm -f "$toDelete"
#		daswitch=1
#	fi
#fi

#lineCheck="$(printf "%s\n" "$line" | grep "^clean_fw.*$" | cut -c 10-)"
#if [ "$lineCheck" != "" ]; then
#	if [ "$lineCheck" != "() {" ]; then
##echo "$lineCheck"
#		toDelete="$(printf "%s\n" "$lineCheck" | grep -o "^.* ")"
##		echo $toDelete
#		rm -f "$toDelete"
#		daswitch=1
#	fi
#fi

#if [ "$(printf "%s\n" "$line" | cut -c 1-13 )" = "clean_kconfig" ] && [ "$daswitch" = "1" ]; then
#	if [ "$(printf "%s\n" "$line" | cut -c 14- )" != " () {" ]; then
#		theFile="$(printf "%s\n" "$line" | cut -d " " -f 2 )"
#		toRemove="$(printf "%s\n" "$line" | cut -d " " -f 3)"
#		echo $theFile
#		echo $toRemove
#		clean_kconfig "$theFile" "$toRemove"
#		daswitch=0
#	fi
#fi
#done

#rm -f scripts/get_dvb_firmware
#rm -f firmware/keyspan_pda/keyspan_pda.HEX
#rm -f firmware/keyspan_pda/xircom_pgs.HEX
#rm -f firmware/dsp56k/bootstrap.bin.ihex

##This stuff is to build

#mkdir "${SYSROOT}/tmp"


if [ "$4" != "headers_all" ]; then

	cd "${myBuildExtractDest}/linux/${filename}/arch/"

	if [ -f "${myBuildExtractDest}/linux/theArch.config" ]; then
		theArch="$(cat "${myBuildExtractDest}/linux/theArch.config")"
	else
		while true; do
			printf "\n\n==TYPE THE ARCHITECTURE==\n\n"

			find . -maxdepth 1 -type d | cut -c 3-

			read theArch

			checkResultFolder "$theArch"

			if [ "$?" = "0" ]; then
				break
			fi
		done
		printf "$theArch" >> "${myBuildExtractDest}/linux/theArch.config"
	fi

	if [ "$(printf "%s\n" "${BUILD}" | cut -d "-" -f 3 | cut -c 1-7)" = "mingw32" ]; then
		sed -i "s#pwd#pwd | cut -c 3-#g" "${myBuildExtractDest}/linux/${filename}/Makefile"
		sed -i "s#realpath \$(abs_objtree)#shell realpath \$(abs_objtree) | cut -c 3-#g" "${myBuildExtractDest}/linux/${filename}/Makefile"
		sed -i "s#realpath \$(dir \$(lastword \$(MAKEFILE_LIST)))#shell realpath \$(dir \$(lastword \$(MAKEFILE_LIST))) | cut -c 3-#g" "${myBuildExtractDest}/linux/${filename}/Makefile"
		sed -i "s#realpath \$(GCC_TOOLCHAIN_DIR)/..#shell realpath \$(GCC_TOOLCHAIN_DIR)/.. | cut -c 3-#g" "${myBuildExtractDest}/linux/${filename}/Makefile"

		sed -i "s#realpath \$(objtree)/vmlinux#shell realpath \$(objtree)/vmlinux#g" "${myBuildExtractDest}/linux/${filename}/arch/arm64/kernel/Makefile"
	fi

	if [ "$4" = "kernel" ]; then

		cd "${myBuildExtractDest}/linux/${filename}/arch/${theArch}/configs"

		if [ -f "${myBuildExtractDest}/linux/thedefconfig.config" ]; then
			thedefconfig="$(cat "${myBuildExtractDest}/linux/thedefconfig.config")"
		else
			while true; do
				printf "\n\n==TYPE THE DEFCONFIG==\n\n"

				find . -maxdepth 1 -type f | cut -c 3-

				read thedefconfig
				checkResultFile "$thedefconfig"

				if [ "$?" = "0" ]; then
					break
				fi
			done
			printf "$thedefconfig" >> "${myBuildExtractDest}/linux/thedefconfig.config"
		fi

		cd "${myBuildExtractDest}/linux/${filename}"

		if [ "$(printf "%s\n" "${BUILD}" | cut -d "-" -f 3 | cut -c 1-7)" != "mingw32" ]; then
			make mrproper
		fi

		cp arch/${theArch}/configs/${thedefconfig} ${myBuildExtractDest}/linux/${filename}/.config

		#enable framebuffer
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_CIRRUS
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_PM2
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_CYBER2000
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_ARC
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_ASILIANT
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_IMSTT
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_VGA16
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_UVESA
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_VESA
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_EFI
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_N411
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_HGA
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_OPENCORES
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_S1D13XXX
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_NVIDIA
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_RIVA
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_I740
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_LE80578
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_MATROX
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_RADEON
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_ATY128
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_ATY
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_S3
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_SAVAGE
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_SIS
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_NEOMAGIC
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_KYRO
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_3DFX
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_VOODOO1
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_VT8623
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_TRIDENT
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_ARK
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_PM3
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_CARMINE
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_SMSCUFX
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_UDL
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_IBM_GXT4500
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_VIRTUAL
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_METRONOME
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_MB862XX
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_SIMPLE
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_SM712
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB

		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_OVERLAY_FS
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_DRM_CIRRUS_QEMU

		#enable devtmpfs for initramfs
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_DEVTMPFS

		#enable cgroups for systemd
		checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_CGROUPS

		if [ "$thedefconfig" = "pmac32_defconfig" ]; then
			#for usb + mouse/keyboard
			checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_INPUT
			checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_MOUSEDEV
			checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_USB
			checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_USB_SUPPORT
			checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_USB_HID
			checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_HID_SUPPORT
			checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_HID_GENERIC
			checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_HID
			checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_USB_XHCI_HCD
			checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_USB_ECHI_HCD
			checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_USB_OHCI_HCD
			checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_USB4
		

		elif [ "$thedefconfig" = "sunxi_defconfig" ]; then

			checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_SUNXI
			checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_SUNXI_LCD
			checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FB_SUNXI_HDMI
			checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FRAMEBUFFER_CONSOLE
			checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FONT_8x8
			checkandreplaceoption "${myBuildExtractDest}/linux/${filename}/.config" CONFIG_FONT_8x16

		fi

		printf "\n\n==Running make.==\n\n"

		if [ "$TARGET" != "i686-pc-gnu" ] && [ "$TARGET" != "x86_64-pc-gnu" ]; then

			make ARCH=${theArch} CROSS_COMPILE=${TARGET}- olddefconfig
	
			if [ "${theArch}" = "x86_64" ] || [ "${theArch}" = "x86" ]; then
				make ARCH=$theArch CROSS_COMPILE=${TARGET}- bzImage modules
				return "$?"
			else
				make ARCH=$theArch CROSS_COMPILE=${TARGET}- zImage modules dtbs
				return "$?"
			fi
		else

		#we set _LINUX because acenv.h complains and gives "#error Unknown target environment" otherwise
		#also tested setting __GNUC__ instead but complained compiler was too old 

			make ARCH=${theArch} CROSS_COMPILE=${TARGET}- EXTRA_CFLAGS="-D_LINUX=1" olddefconfig
	
			if [ "${theArch}" = "x86_64" ] || [ "${theArch}" = "x86" ]; then
				make ARCH=$theArch CROSS_COMPILE=${TARGET}- EXTRA_CFLAGS="-D_LINUX=1" bzImage modules
				return "$?"
			else
				make ARCH=$theArch CROSS_COMPILE=${TARGET}- EXTRA_CFLAGS="-D_LINUX=1" zImage modules dtbs
				return "$?"
			fi

		fi

	else
		#headers
		cd "${myBuildExtractDest}/linux/${filename}"

		if [ "$(printf "%s\n" "${BUILD}" | cut -d "-" -f 3 | cut -c 1-7)" != "mingw32" ]; then
			make mrproper
		fi

		make ARCH=$theArch INSTALL_HDR_PATH="${SYSROOT}${PREFIX}/${TARGET}" headers
		#make INSTALL_HDR_PATH="${SYSROOT}${PREFIX}" allnoconfig
	fi
else
#headers_all
	cd "${myBuildExtractDest}/linux/${filename}"

	if [ "$(printf "%s\n" "${BUILD}" | cut -d "-" -f 3 | cut -c 1-7)" != "mingw32" ]; then
		make mrproper
	fi

	make INSTALL_HDR_PATH="${SYSROOT}${PREFIX}/${TARGET}" allnoconfig
fi
}

do_install(){
#here you put the installation commands, like make install
if [ "$4" != "headers_all" ]; then

	cd "${myBuildExtractDest}/linux/${filename}/arch/"

	if [ -f "${myBuildExtractDest}/linux/theArch.config" ]; then
		theArch="$(cat "${myBuildExtractDest}/linux/theArch.config")"
	else
		while true; do
			printf "\n\n==TYPE THE ARCHITECTURE==\n\n"

			find . -maxdepth 1 -type d | cut -c 3-

			read theArch

			checkResultFolder "$theArch"

			if [ "$?" = "0" ]; then
				break
			fi
		done
		printf "$theArch" >> "${myBuildExtractDest}/linux/theArch.config"
	fi

	if [ "$4" = "kernel" ]; then 

		cd "${myBuildExtractDest}/linux/${filename}"

		mkdir "${SYSROOT}/boot"

		if [ "${theArch}" = "powerpc" ]; then
			cp "vmlinux" "${SYSROOT}/boot/vmlinuz-linux"
		elif [ -f "arch/${theArch}/boot/zImage" ]; then
			printf "Copying %s\n" "arch/${theArch}/boot/zImage"
			cp "arch/${theArch}/boot/zImage" "${SYSROOT}/boot/vmlinuz-linux"
		fi



		if [ -f "arch/${theArch}/boot/bzImage" ]; then
		printf "Copying %s\n" "arch/${theArch}/boot/bzImage"
		cp "arch/${theArch}/boot/bzImage" "${SYSROOT}/boot/vmlinuz-linux"
		fi

		make ARCH=$theArch CROSS_COMPILE=${TARGET}- INSTALL_MOD_PATH="${SYSROOT}" modules_install
		mkdir -p "${SYSROOT}/boot/dtbs"
		make ARCH=$theArch CROSS_COMPILE=${TARGET}- INSTALL_DTBS_PATH="${SYSROOT}/boot/dtbs" dtbs_install

		cd "${SYSROOT}"
		ln -s boot/vmlinuz-linux vmlinuz

	else
	#headers

		cd "${myBuildExtractDest}/linux/${filename}"

		make ARCH=$theArch CROSS_COMPILE=${TARGET}- INSTALL_HDR_PATH="${SYSROOT}${PREFIX}/${TARGET}" headers_install
	#make CROSS_COMPILE=${TARGET}- INSTALL_HDR_PATH="${SYSROOT}${PREFIX}" headers_install_all

	fi
else
#headers_all
	cd "${myBuildExtractDest}/linux/${filename}"
	make CROSS_COMPILE=${TARGET}- INSTALL_HDR_PATH="${SYSROOT}" headers_install_all
fi

return "$?"
}

do_package(){

#here you package the files
if [ "$4" = "kernel" ]; then
	cp -a "${myBuildHome}"/myBuilds/linux/linux-image.control "${CONTDIR}/control"
else
	cp -a "${myBuildHome}"/myBuilds/linux/linux-headers.control "${CONTDIR}/control"
fi

printf "Architecture: %s\n" "$(printf "%s\n" "${TARGET}" | cut -d "-" -f 1-2)" >> "${CONTDIR}/control"

printf "2.0" > "${BUILDDIR}/debian-binary"

cd "${CONTDIR}"
tar --numeric-owner --group=0 --owner=0 -cf "${BUILDDIR}/control.tar" ./*

cd "${SYSROOT}"
tar --numeric-owner --group=0 --owner=0 -cf "${BUILDDIR}/data.tar" ./*

cd "${BUILDDIR}"

if [ "$4" = "kernel" ]; then
	ar r "${PKGDIR}/linux-image_${version}.$(printf "%s" "${TARGET}" | cut -d "-" -f 1-2).deb" ./debian-binary ./control.tar ./data.tar
else
	ar r "${PKGDIR}/linux-headers_${version}.$(printf "%s" "${TARGET}" | cut -d "-" -f 1-2).deb" ./debian-binary ./control.tar ./data.tar
fi

rm -rf "${CONTDIR}"
rm -rf "${SYSROOT}"
mkdir -p "${CONTDIR}"
mkdir -p "${SYSROOT}"
rm -f "${BUILDDIR}/debian-binary"
rm -f "${BUILDDIR}/control.tar"
rm -f "${BUILDDIR}/data.tar"


cd "${myBuildHome}"
return "$?"
}

if [ "$myBuildDoNotCallMainFunction" != "1" ]; then
#main code goes here
"${myBuildHelpersDir}"/argumentHelper.sh "$1" "$0" $@
fi
