#!/bin/sh
actualname="tzdata"
actualname2="tzcode"
version="2023c"
filename="${actualname}${version}"
filename2="${actualname2}${version}"
extension=".tar.gz"
source="https://data.iana.org/time-zones/releases/${filename}${extension}"
source="https://data.iana.org/time-zones/releases/${filename2}${extension}"
sumUrl=""

#functions

do_get(){
	"${myBuildHelpersDir}"/myBuildGet.sh "${source}" "${myBuildSourceDest}"
	"${myBuildHelpersDir}"/myBuildGet.sh "${source2}" "${myBuildSourceDest}"
	return "$?"
}

do_extract(){
	mkdir -p "${myBuildExtractDest}/${filename}"
	"${myBuildHelpersDir}"/myBuildExtract.sh "${myBuildSourceDest}/${filename}${extension}" "${myBuildExtractDest}/${filename}"
	"${myBuildHelpersDir}"/myBuildExtract.sh "${myBuildSourceDest}/${filename2}${extension}" "${myBuildExtractDest}/${filename}"
	return "$?"
}

do_build(){
cd "${myBuildExtractDest}/${filename}"
make

return "$?"
}

do_install(){
#here you put the installation commands, like make install
cd "${myBuildExtractDest}/${filename}"
make DESTDIR=${SYSROOT} install

# install tzdata stuff
/usr/sbin/zic -b fat -d "${SYSROOT}"/usr/share/zoneinfo ${_timezones[@]}
/usr/sbin/zic -b fat -d "${SYSROOT}"/usr/share/zoneinfo/posix ${_timezones[@]}
/usr/sbin/zic -b fat -d "${SYSROOT}"/usr/share/zoneinfo/right -L leapseconds ${_timezones[@]}
# This creates the posixrules file. We use New York because POSIX requires the daylight savings time rules to be in accordance with US rules.   
/usr/sbin/zic -b fat -d "${SYSROOT}"/usr/share/zoneinfo -p America/New_York
install -m644 -t "${SYSROOT}"/usr/share/zoneinfo iso3166.tab leap-seconds.list zone1970.tab zone.tab SECURITY # zone.tab is depricated and will go soon
  
# cleanup
rm "${SYSROOT}/etc/localtime"

return "$?"
}

do_package(){
#here you package the files
cp -a "${myBuildHome}"/myBuilds/${actualname}/${actualname}.control "${CONTDIR}/control"
printf "Architecture: %s\n" "$(printf "%s\n" "${TARGET}" | cut -d "-" -f 1-2)" >> "${CONTDIR}/control"

printf "2.0" > "${BUILDDIR}/debian-binary"

cd "${CONTDIR}"
tar --numeric-owner --group=0 --owner=0 -cf "${BUILDDIR}/control.tar" ./*

cd "${SYSROOT}"
tar --numeric-owner --group=0 --owner=0 -cf "${BUILDDIR}/data.tar" ./*

cd "${BUILDDIR}"
ar r "${PKGDIR}/${actualname}_${version}.$(printf "%s" "${TARGET}" | cut -d "-" -f 1-2).deb" ./debian-binary ./control.tar ./data.tar

rm -rf "${CONTDIR}"
rm -rf "${SYSROOT}"
mkdir -p "${CONTDIR}"
mkdir -p "${SYSROOT}"
rm -f "${BUILDDIR}/debian-binary"
rm -f "${BUILDDIR}/control.tar"
rm -f "${BUILDDIR}/data.tar"

cd "${myBuildHome}"
return "$?"
}

if [ "$myBuildDoNotCallMainFunction" != "1" ]; then
#main code goes here
"${myBuildHelpersDir}"/argumentHelper.sh "$1" "$0"
fi