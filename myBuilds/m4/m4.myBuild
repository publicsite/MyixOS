#!/bin/sh
actualname="m4"
version="1.4.19"
filename="${actualname}-${version}"
extension=".tar.xz"
source="http://ftp.gnu.org/gnu/m4/${filename}${extension}"
sumUrl=""

#functions

do_get(){
	"${myBuildHelpersDir}"/myBuildGet.sh "${source}" "${myBuildSourceDest}"
	return "$?"
}

do_extract(){
	"${myBuildHelpersDir}"/myBuildExtract.sh "${myBuildSourceDest}/${filename}${extension}" "${myBuildExtractDest}"
	return "$?"
}

do_build(){
#here you put commands like configure and make

cd "${myBuildExtractDest}/${filename}"

patch -p1 < "${myBuildHome}"/myBuilds/m4/0001-fflush-adjust-to-glibc-2.28-libio.h-removal.patch
patch -p1 < "${myBuildHome}"/myBuilds/m4/0002-fflush-be-more-paranoid-about-libio.h-change.patch

#CFLAGS2="$CFLAGS"

#CFLAGS="$CFLAGS2 -D__GNU_LIBRARY__=1" 

if [ "$(printf "%s\n" "${BUILD}" | cut -d "-" -f 3 | cut -c 1-7)" != "mingw32" ]; then
	CFLAGS="--sysroot=${TEMP_SYSROOT} -isystem ${TEMP_SYSROOT}${PREFIX}/${TARGET}/include" \
	LDFLAGS="-B${TEMP_SYSROOT}${PREFIX}/${TARGET}/lib -L${TEMP_SYSROOT}${PREFIX}/${TARGET}/lib" \
	./configure \
	    --prefix="${PREFIX}/${TARGET}" \
	    --build=${BUILD} \
	    --host=${HOST} \
	    --target=${TARGET}
else
	CFLAGS="--sysroot=${TEMP_SYSROOT} -isystem ${TEMP_SYSROOT}${PREFIX}/${TARGET}/include" \
	LDFLAGS="-B${TEMP_SYSROOT}${PREFIX}/${TARGET}/lib -L${TEMP_SYSROOT}${PREFIX}/${TARGET}/lib" \
	ac_cv_type_uid_t=false \
	./configure \
	    --prefix="${PREFIX}/${TARGET}" \
	    --build=${BUILD} \
	    --host=${HOST} \
	    --target=${TARGET}
fi
#CFLAGS="$CFLAGS2 -D__GNU_LIBRARY__=1" 
make DESTDIR=${SYSROOT} all
return "$?"
}

do_install(){
#here you put the installation commands, like make install
cd "${myBuildExtractDest}/${filename}"
make install DESTDIR=${SYSROOT}

"${myBuildHome}/myBuilds/m4/fix_m4_for_bison.sh" "${PREFIX}/${TARGET}/bin/m4" "${PREFIX}/${TARGET}/bin/m4.backup" "${SYSROOT}"

return "$?"
}

do_package(){
#here you package the files
cp -a "${myBuildHome}"/myBuilds/${actualname}/${actualname}.control "${CONTDIR}/control"
printf "Architecture: %s\n" "$(printf "%s\n" "${TARGET}" | cut -d "-" -f 1-2)" >> "${CONTDIR}/control"

printf "2.0" > "${BUILDDIR}/debian-binary"

cd "${CONTDIR}"
tar --numeric-owner --group=0 --owner=0 -cf "${BUILDDIR}/control.tar" ./*

cd "${SYSROOT}"
tar --numeric-owner --group=0 --owner=0 -cf "${BUILDDIR}/data.tar" ./*

cd "${BUILDDIR}"
ar r "${PKGDIR}/${actualname}_${version}.$(printf "%s" "${TARGET}" | cut -d "-" -f 1-2).deb" ./debian-binary ./control.tar ./data.tar

rm -rf "${CONTDIR}"
rm -rf "${SYSROOT}"
mkdir -p "${CONTDIR}"
mkdir -p "${SYSROOT}"
rm -f "${BUILDDIR}/debian-binary"
rm -f "${BUILDDIR}/control.tar"
rm -f "${BUILDDIR}/data.tar"

cd "${myBuildHome}"
return "$?"
}

if [ "$myBuildDoNotCallMainFunction" != "1" ]; then
#main code goes here
"${myBuildHelpersDir}"/argumentHelper.sh "$1" "$0"
fi