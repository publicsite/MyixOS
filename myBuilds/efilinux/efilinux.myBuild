#!/bin/sh
actualname="efilinux"
version="1.1"
filename="${actualname}-${version}"
extension=".tar.gz"
source="https://mirrors.edge.kernel.org/pub/linux/utils/boot/${actualname}/${filename}${extension}"
sumUrl=""

#functions

do_get(){
	"${myBuildHelpersDir}"/myBuildGet.sh "${source}" "${myBuildSourceDest}"
	return "$?"
}

do_extract(){
	"${myBuildHelpersDir}"/myBuildExtract.sh "${myBuildSourceDest}/${filename}${extension}" "${myBuildExtractDest}"
	return "$?"
}


do_build(){
#here you put commands like configure and make

cd "${myBuildExtractDest}/${filename}"

sed -i "s/-Werror$/-Werror -Wno-error=address-of-packed-member/g" Makefile

#sed -i "s# -Bsymbolic -shared -nostdlib -znocombreloc##g" Makefile
sed -i "s#-L\$(LIBDIR)#-L${TEMP_SYSROOT}\$(LIBDIR)#g" Makefile
sed -i "s#LIBDIR=/usr/lib64#LIBDIR=/usr/${TARGET}/lib#g" Makefile
sed -i "s#LIBDIR=/usr/lib#LIBDIR=/usr/${TARGET}/lib#g" Makefile
sed -i "s#find \$(LIBDIR)#find ${TEMP_SYSROOT}\$(LIBDIR)#g" Makefile

CC="${TARGET}-gcc --sysroot=${TEMP_SYSROOT}" CPPFLAGS="-I${TEMP_SYSROOT}/usr/${TARGET}/include/efi" LD="${TARGET}-ld" make DESTDIR=${SYSROOT}

return "$?"
}

do_install(){
#here you put the installation commands, like make install
cd "${myBuildExtractDest}/${filename}"
make DESTDIR=${SYSROOT} install
return "$?"
}

do_package(){
#here you package the files
cp -a "${myBuildsDir}/${actualname}/${actualname}.control" "${CONTDIR}/control"
printf "Architecture: %s\n" "$(printf "%s\n" "${TARGET}" | cut -d "-" -f 1-2)" >> "${CONTDIR}/control"

printf "2.0" > "${BUILDDIR}/debian-binary"

cd "${CONTDIR}"
tar --numeric-owner --group=0 --owner=0 -czf "${BUILDDIR}/control.tar.gz" ./*

cd "${SYSROOT}"
tar --numeric-owner --group=0 --owner=0 -czf "${BUILDDIR}/data.tar.gz" ./*

cd "${BUILDDIR}"
tar --numeric-owner --group=0 --owner=0 -czf "${PKGDIR}/${actualname}_${version}.$(printf "%s" "${TARGET}" | cut -d "-" -f 1-2).ipk" ./debian-binary ./control.tar.gz ./data.tar.gz

rm -rf "${CONTDIR}"
rm -rf "${SYSROOT}"
mkdir -p "${CONTDIR}"
mkdir -p "${SYSROOT}"
rm -f "${BUILDDIR}/debian-binary"
rm -f "${BUILDDIR}/control.tar.gz"
rm -f "${BUILDDIR}/data.tar.gz"

cd "${myBuildHome}"
return "$?"
}

if [ "$myBuildDoNotCallMainFunction" != "1" ]; then
#main code goes here
"${myBuildHelpersDir}"/argumentHelper.sh "$1" "$0" "$2" "$3"
fi