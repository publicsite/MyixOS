#!/bin/sh
filename="binutils-2.30"
extension=".tar.gz"
source="http://ftp.gnu.org/gnu/binutils/${filename}${extension}"
sumUrl=""

#functions

do_get(){
	"${myBuildHelpersDir}"/myBuildGet.sh "${source}" "${myBuildSourceDest}"
	return "$?"
}

do_extract(){
	"${myBuildHelpersDir}"/myBuildExtract.sh "${myBuildSourceDest}/${filename}${extension}" "${myBuildExtractDest}"
	return "$?"
}

do_build(){
#here you put commands like configure and make

cd "${myBuildExtractDest}/${filename}"

#this patch does not fix "make[3]: *** [Makefile:1933: s-selftest] Error 1" when compiling gcc afaik
#note, this should be fixed in 2.30.1 (which was in alpha at time of packaging)
#patch -p1 < "${myBuildHome}"/myBuilds/binutils/binutils-bug-22762.patch

if [ "$?" != "0" ]; then return 1; fi #check for errors

printf "\n\n==Running configure.==\n\n"

#if [ "${BITS}" = "64"]; then

./configure \
	--with-sysroot="${SYSROOT}" \
	--with-lib-path="/lib/${TARGET}:/usr/local/lib/${TARGET}:/usr/lib/${TARGET}" \
	--program-prefix="${TARGET}-" \
	--build=$BUILD \
	--target=$TARGET \
	--prefix=$PREFIX \
	--enable-languages=c,c++ \
	--enable-cxx \
	--enable-threads \
	--enable-64-bit-bfd


if [ "$?" != "0" ]; then return 1; fi #check for errors
#	    --with-sysroot=$ROOTFS \
#	    $WITHPPL \

printf "\n\n==Running make.==\n\n"

make
if [ "$?" != "0" ]; then return 1; fi #check for errors

return "$?"
}

do_install(){
#here you put the installation commands, like make install
cd "${myBuildExtractDest}/${filename}"
make install DESTDIR="${SYSROOT}"
mkdir /etc
echo "/usr/local/lib/${TARGET}" >> "${SYSROOT}/etc/ld.so.conf"
echo "/usr/lib/${TARGET}" >> "${SYSROOT}/etc/ld.so.conf"
ln -s "${PREFIX}/bin/${TARGET}-ar" "${SYSROOT}/${PREFIX}/bin/ar"
ln -s "${PREFIX}/bin/${TARGET}-as" "${SYSROOT}/${PREFIX}/bin/as"
ln -s "${PREFIX}/bin/${TARGET}-ld" "${SYSROOT}/${PREFIX}/bin/ld"
ln -s "${PREFIX}/bin/${TARGET}-gprof" "${SYSROOT}/${PREFIX}/bin/gprof"
ln -s "${PREFIX}/bin/${TARGET}-addr2line" "${SYSROOT}/${PREFIX}/bin/addr2line"
ln -s "${PREFIX}/bin/${TARGET}-c++filt" "${SYSROOT}/${PREFIX}/bin/c++filt"
ln -s "${PREFIX}/bin/${TARGET}-nm" "${SYSROOT}/${PREFIX}/bin/nm"
ln -s "${PREFIX}/bin/${TARGET}-objcopy" "${SYSROOT}/${PREFIX}/bin/objcopy"
ln -s "${PREFIX}/bin/${TARGET}-objdump" "${SYSROOT}/${PREFIX}/bin/objdump"
ln -s "${PREFIX}/bin/${TARGET}-ranlib" "${SYSROOT}/${PREFIX}/bin/ranlib"
ln -s "${PREFIX}/bin/${TARGET}-readelf" "${SYSROOT}/${PREFIX}/bin/readelf"
ln -s "${PREFIX}/bin/${TARGET}-size" "${SYSROOT}/${PREFIX}/bin/size"
ln -s "${PREFIX}/bin/${TARGET}-strip" "${SYSROOT}/${PREFIX}/bin/strip"
ln -s "${PREFIX}/bin/${TARGET}-elfedit" "${SYSROOT}/${PREFIX}/bin/elfedit"
ln -s "${PREFIX}/bin/${TARGET}-ld.bfd" "${SYSROOT}/${PREFIX}/bin/ld.bfd"

/sbin/ldconfig -r "${SYSROOT}" "/lib/${TARGET}"
/sbin/ldconfig -r "${SYSROOT}" "/usr/local/lib/${TARGET}"
/sbin/ldconfig -r "${SYSROOT}" "/usr/lib/${TARGET}"

ln -s "${PREFIX}/bin/${TARGET}-ar" "${PREFIX}/bin/ar"
if [ "$?" != "0" ]; then return 1; fi #check for errors
return "$?"
}

do_package(){
#here you package the files
echo "package!"
return "$?"
}

if [ "$myBuildDoNotCallMainFunction" != "1" ]; then
#main code goes here
"${myBuildHelpersDir}/argumentHelper.sh" "$1" "$0"
fi
