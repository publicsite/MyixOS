#!/bin/sh
actualname="make"
version="4.2.1"
filename="${actualname}-${version}"
extension=".tar.gz"
source="http://ftp.gnu.org/gnu/make/${filename}${extension}"
sumUrl=""

#functions

do_get(){
	"${myBuildHelpersDir}"/myBuildGet.sh "${source}" "${myBuildSourceDest}"
	return "$?"
}

do_extract(){
	"${myBuildHelpersDir}"/myBuildExtract.sh "${myBuildSourceDest}/${filename}${extension}" "${myBuildExtractDest}"
	return "$?"
}

do_build(){
#here you put commands like configure and make
cd "${myBuildExtractDest}/${filename}"
#patch -p0 < "${myBuildHome}/myBuilds/make/configure.ac_glob.patch"
#patch -p0 < "${myBuildHome}/myBuilds/make/glob.c_glob.patch"

#patch -p0 < "${myBuildHome}/myBuilds/make/move-pkg_prog_pkg_config-variable_fix.patch"
#patch -p0 < "${myBuildHome}/myBuilds/make/pkg_check_modules-fix.patch"
#this patch fixes undefined reference to __alloca - https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=891365
patch -p1 < "${myBuildHome}/myBuilds/make/make-dfsg-glob-glibc227.patch"
patch -p0 < "${myBuildHome}/myBuilds/make/fix-no-guile-option.patch"
autoreconf -vfi
with_guile=no CC="${TARGET}-gcc --sysroot=${TEMP_SYSROOT}" \
./configure --build=${BUILD} --host=${HOST} --target=${TARGET} --prefix="${PREFIX}/${TARGET}" --with-guile=no
make DESTDIR=${SYSROOT}
return "$?"
}

do_install(){
#here you put the installation commands, like make install
cd "${myBuildExtractDest}/${filename}"
make DESTDIR=${SYSROOT} install
return "$?"
}

do_package(){
#here you package the files
cp -a "${myBuildHome}"/myBuilds/${actualname}/${actualname}.control "${CONTDIR}/control"
printf "Architecture: %s\n" "$(printf "%s\n" "${TARGET}" | cut -d "-" -f 1-2)" >> "${CONTDIR}/control"

printf "2.0" > "${BUILDDIR}/debian-binary"

cd "${CONTDIR}"
tar --numeric-owner --group=0 --owner=0 -cf "${BUILDDIR}/control.tar" ./*

cd "${SYSROOT}"
tar --numeric-owner --group=0 --owner=0 -cf "${BUILDDIR}/data.tar" ./*

cd "${BUILDDIR}"
ar r "${PKGDIR}/${actualname}_${version}.$(printf "%s" "${TARGET}" | cut -d "-" -f 1-2).deb" ./debian-binary ./control.tar ./data.tar

rm -rf "${CONTDIR}"
rm -rf "${SYSROOT}"
mkdir -p "${CONTDIR}"
mkdir -p "${SYSROOT}"
rm -f "${BUILDDIR}/debian-binary"
rm -f "${BUILDDIR}/control.tar"
rm -f "${BUILDDIR}/data.tar"

cd "${myBuildHome}"
return "$?"
}

if [ "$myBuildDoNotCallMainFunction" != "1" ]; then
#main code goes here
"${myBuildHelpersDir}"/argumentHelper.sh "$1" "$0"
fi