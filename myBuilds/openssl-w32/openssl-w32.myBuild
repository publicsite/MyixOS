#!/bin/sh
actualname="openssl"
version="1.1.1c"
filename="${actualname}-${version}"
extension=".tar.gz"
source="https://www.openssl.org/source/${filename}${extension}"
sumUrl=""

#functions

do_get(){
	"${myBuildHelpersDir}"/myBuildGet.sh "${source}" "${myBuildSourceDest}"
	return "$?"
}

do_extract(){
	"${myBuildHelpersDir}"/myBuildExtract.sh "${myBuildSourceDest}/${filename}${extension}" "${myBuildExtractDest}"
	return "$?"
}

do_build(){
#here you put commands like configure and make

cd "${myBuildExtractDest}/${filename}"
if [ "$?" != "0" ]; then return 1; fi #check for errors

#./Configure shared -DL_ENDIAN --prefix="${PREFIX}/${TARGET}" --openssldir=/usr/lib linux

if [ "$BITS" = "64" ]; then
	CFLAGS="-I${TEMP_SYSROOT}${PREFIX}/${TARGET}/include" LDFLAGS="-B${TEMP_SYSROOT}${PREFIX}/${TARGET}/lib" \
	./Configure --prefix="${PREFIX}/${TARGET}" --openssldir=${PREFIX}/${TARGET}/lib --cross-compile-prefix=${TARGET}- shared mingw64
else
	CFLAGS="-I${TEMP_SYSROOT}${PREFIX}/${TARGET}/include" LDFLAGS="-B${TEMP_SYSROOT}${PREFIX}/${TARGET}/lib" \
	./Configure --prefix="${PREFIX}/${TARGET}" --openssldir=${PREFIX}/${TARGET}/lib --cross-compile-prefix=${TARGET}- shared mingw
fi

#--libdir=${TARGET}/lib

#note, it says you shouldn't set INSTALLTOP and OPENSSLDIR directly, but there is no apparent reasonable (and working) way.
#make INSTALLTOP=/usr OPENSSLDIR=/usr/lib

make

return "$?"
}

do_install(){
#here you put the installation commands, like make install
cd "${myBuildExtractDest}/${filename}"
make DESTDIR="${SYSROOT}" install
#we ln the dlls because libtool installs dlls by default in bindir instead of libdir
	cd ${SYSROOT}/mingw/${TARGET}/usr/lib
	$MYIXOS_LINK "../bin/lib"*".dll" .

$MYIXOS_LINK libcrypto.so ${SYSROOT}${PREFIX}/${TARGET}/lib/libcrypto.so.1.1
}

do_package(){
#here you package the files
cp -a "${myBuildHome}"/myBuilds/${actualname}-w32/${actualname}.control "${CONTDIR}/control"
printf "Architecture: %s\n" "$(printf "%s\n" "${TARGET}" | cut -d "-" -f 1-2)" >> "${CONTDIR}/control"

printf "2.0" > "${BUILDDIR}/debian-binary"

cd "${CONTDIR}"
tar --numeric-owner --group=0 --owner=0 -cf "${BUILDDIR}/control.tar" ./*

cd "${SYSROOT}"
tar --numeric-owner --group=0 --owner=0 -cf "${BUILDDIR}/data.tar" ./*

cd "${BUILDDIR}"
ar r "${PKGDIR}/${actualname}_${version}.$(printf "%s" "${TARGET}" | cut -d "-" -f 1-2).deb" ./debian-binary ./control.tar ./data.tar

rm -rf "${CONTDIR}"
rm -rf "${SYSROOT}"
mkdir -p "${CONTDIR}"
mkdir -p "${SYSROOT}"
rm -f "${BUILDDIR}/debian-binary"
rm -f "${BUILDDIR}/control.tar"
rm -f "${BUILDDIR}/data.tar"

cd "${myBuildHome}"
return "$?"
}

if [ "$myBuildDoNotCallMainFunction" != "1" ]; then
#main code goes here
"${myBuildHelpersDir}"/argumentHelper.sh "$1" "$0"
fi
